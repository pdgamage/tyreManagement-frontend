import React, { useEffect, useState } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { API_CONFIG } from '../config/api';
import { 
  ArrowLeft, 
  Loader2, 
  AlertCircle, 
  CheckCircle, 
  XCircle, 
  Clock, 
  Truck, 
  Info, 
  Calendar, 
  Hash, 
  User, 
  FileText 
} from 'lucide-react';
import { PDFDownloadLink, PDFViewer } from '@react-pdf/renderer';
import RequestPdfReport from '../components/RequestPdfReport';
import { Button } from '../components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '../components/ui/dialog';

// Define the RequestDetails interface
export interface RequestDetails {
  id: string;
  vehicleNumber: string;
  status: string;
  orderNumber: string;
  submittedAt: string;
  requestDate: string;
  orderPlacedDate?: string;
  supplierName: string;
  supplierPhone?: string;
  supplierEmail?: string;
  engineerName?: string;
  approvalDate?: string;
  remarks?: string;
  quantity?: number;
  tubesQuantity?: number;
  tireSize?: string;
}

// Status badge component
const StatusBadge: React.FC<{ status: string }> = ({ status }) => {
  const statusConfig = {
    pending: {
      icon: <Clock className="w-4 h-4 mr-1" />,
      bg: 'bg-yellow-100',
      text: 'text-yellow-800',
      border: 'border-yellow-200',
    },
    approved: {
      icon: <CheckCircle className="w-4 h-4 mr-1" />,
      bg: 'bg-green-100',
      text: 'text-green-800',
      border: 'border-green-200',
    },
    rejected: {
      icon: <XCircle className="w-4 h-4 mr-1" />,
      bg: 'bg-red-100',
      text: 'text-red-800',
      border: 'border-red-200',
    },
    default: {
      icon: <Info className="w-4 h-4 mr-1" />,
      bg: 'bg-gray-100',
      text: 'text-gray-800',
      border: 'border-gray-200',
    },
  };

  const config = statusConfig[status.toLowerCase() as keyof typeof statusConfig] || statusConfig.default;

  return (
    <span
      className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${config.bg} ${config.text} ${config.border} border`}
    >
      {config.icon}
      {status.charAt(0).toUpperCase() + status.slice(1).toLowerCase()}
    </span>
  );
};

const RequestDetailsPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const location = useLocation();
  const [request, setRequest] = useState<RequestDetails | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [showPdfPreview, setShowPdfPreview] = useState(false);
  const [isPdfLoading, setIsPdfLoading] = useState(false);

  useEffect(() => {
    const fetchRequestDetails = async () => {
      if (!id) return;
      
      setIsLoading(true);
      setError('');
      
      try {
        const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.REQUESTS}/${id}`);
        
        if (!response.ok) {
          throw new Error('Failed to fetch request details');
        }
        
        const data = await response.json();
        setRequest(data);
      } catch (err) {
        console.error('Error fetching request details:', err);
        setError('Failed to load request details. Please try again later.');
      } finally {
        setIsLoading(false);
      }
    };

    fetchRequestDetails();
  }, [id]);

  // Handle back navigation
  const handleBack = () => {
    navigate(-1);
  };

  // Format date for display
  const formatDate = (dateString?: string) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="w-8 h-8 text-blue-500 animate-spin mx-auto mb-4" />
          <p className="text-gray-600">Loading request details...</p>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center max-w-md p-6 bg-white rounded-xl shadow-md">
          <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-800 mb-2">Error Loading Request</h2>
          <p className="text-gray-600 mb-6">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  // No request found
  if (!request) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center max-w-md p-6 bg-white rounded-xl shadow-md">
          <Info className="w-12 h-12 text-yellow-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-800 mb-2">Request Not Found</h2>
          <p className="text-gray-600 mb-6">The requested tire request could not be found.</p>
          <button
            onClick={() => navigate('/user/dashboard')}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
          >
            Back to Dashboard
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex justify-between items-center mb-6">
          <button
            onClick={handleBack}
            className="flex items-center text-blue-600 hover:text-blue-800 transition-colors"
          >
            <ArrowLeft className="w-5 h-5 mr-1" />
            Back to {location.state?.fromInquiry ? 'Inquiries' : 'Dashboard'}
          </button>
          
          <Button 
            variant="outline" 
            onClick={() => setShowPdfPreview(true)}
            className="gap-2"
            disabled={isPdfLoading}
          >
            {isPdfLoading ? (
              <>
                <Loader2 className="w-4 h-4 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <FileText className="w-4 h-4" />
                Generate Report
              </>
            )}
          </Button>
        </div>

        {/* Main content */}
        <div className="bg-white shadow overflow-hidden sm:rounded-lg">
          {/* Header */}
          <div className="px-4 py-5 sm:px-6 border-b border-gray-200">
            <div className="flex justify-between items-center">
              <div>
                <h3 className="text-lg leading-6 font-medium text-gray-900">
                  Tire Request Details
                </h3>
                <p className="mt-1 max-w-2xl text-sm text-gray-500">
                  Request ID: {request.id}
                </p>
              </div>
              <StatusBadge status={request.status} />
            </div>
          </div>

          {/* Request details */}
          <div className="border-t border-gray-200">
            <dl>
              {/* Vehicle Information */}
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500 flex items-center">
                  <Truck className="w-4 h-4 mr-2" />
                  Vehicle Information
                </dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-xs text-gray-500">Vehicle Number</p>
                      <p className="font-medium">{request.vehicleNumber}</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500">Status</p>
                      <StatusBadge status={request.status} />
                    </div>
                  </div>
                </dd>
              </div>

              {/* Request Information */}
              <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500 flex items-center">
                  <FileText className="w-4 h-4 mr-2" />
                  Request Information
                </dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <p className="text-xs text-gray-500">Order Number</p>
                      <p className="font-medium">{request.orderNumber || 'N/A'}</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500">Request Date</p>
                      <p className="font-medium">{formatDate(request.requestDate)}</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500">Submitted At</p>
                      <p className="font-medium">{formatDate(request.submittedAt)}</p>
                    </div>
                    {request.orderPlacedDate && (
                      <div>
                        <p className="text-xs text-gray-500">Order Placed Date</p>
                        <p className="font-medium">{formatDate(request.orderPlacedDate)}</p>
                      </div>
                    )}
                  </div>
                </dd>
              </div>

              {/* Tire Information */}
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500 flex items-center">
                  <Info className="w-4 h-4 mr-2" />
                  Tire Information
                </dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {request.tireSize && (
                      <div>
                        <p className="text-xs text-gray-500">Tire Size</p>
                        <p className="font-medium">{request.tireSize}</p>
                      </div>
                    )}
                    <div>
                      <p className="text-xs text-gray-500">Quantity</p>
                      <p className="font-medium">{request.quantity || 'N/A'}</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500">Tubes Quantity</p>
                      <p className="font-medium">{request.tubesQuantity || 'N/A'}</p>
                    </div>
                  </div>
                </dd>
              </div>

              {/* Supplier Information */}
              <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500 flex items-center">
                  <User className="w-4 h-4 mr-2" />
                  Supplier Information
                </dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <p className="text-xs text-gray-500">Supplier Name</p>
                      <p className="font-medium">{request.supplierName || 'N/A'}</p>
                    </div>
                    {request.supplierPhone && (
                      <div>
                        <p className="text-xs text-gray-500">Phone</p>
                        <p className="font-medium">{request.supplierPhone}</p>
                      </div>
                    )}
                    {request.supplierEmail && (
                      <div>
                        <p className="text-xs text-gray-500">Email</p>
                        <p className="font-medium">{request.supplierEmail}</p>
                      </div>
                    )}
                  </div>
                </dd>
              </div>

              {/* Additional Information */}
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500 flex items-center">
                  <Info className="w-4 h-4 mr-2" />
                  Additional Information
                </dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                  <div className="grid grid-cols-1 gap-4">
                    {request.engineerName && (
                      <div>
                        <p className="text-xs text-gray-500">Engineer Name</p>
                        <p className="font-medium">{request.engineerName}</p>
                      </div>
                    )}
                    {request.approvalDate && (
                      <div>
                        <p className="text-xs text-gray-500">Approval Date</p>
                        <p className="font-medium">{formatDate(request.approvalDate)}</p>
                      </div>
                    )}
                    {request.remarks && (
                      <div>
                        <p className="text-xs text-gray-500">Remarks</p>
                        <p className="font-medium">{request.remarks}</p>
                      </div>
                    )}
                  </div>
                </dd>
              </div>
            </dl>
          </div>
        </div>
      </div>

      {/* PDF Preview Modal */}
      <Dialog open={showPdfPreview} onOpenChange={setShowPdfPreview}>
        <DialogContent className="max-w-6xl h-[90vh] flex flex-col p-0">
          <DialogHeader className="px-6 pt-4 pb-2 border-b">
            <div className="flex justify-between items-center">
              <DialogTitle>Request Report Preview</DialogTitle>
              <div className="flex gap-2">
                <PDFDownloadLink 
                  document={<RequestPdfReport request={request} />} 
                  fileName={`Tire_Request_${request.orderNumber || request.id}.pdf`}
                  className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  onClick={() => setIsPdfLoading(true)}
                  onLoadStart={() => setIsPdfLoading(true)}
                  onLoad={() => setIsPdfLoading(false)}
                >
                  {({ loading }) => (
                    <>
                      {loading || isPdfLoading ? (
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      ) : (
                        <FileText className="w-4 h-4 mr-2" />
                      )}
                      Download PDF
                    </>
                  )}
                </PDFDownloadLink>
              </div>
            </div>
          </DialogHeader>
          <div className="flex-1 overflow-hidden">
            <PDFViewer width="100%" height="100%">
              <RequestPdfReport request={request} />
            </PDFViewer>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default RequestDetailsPage;
